// src/screens/DeckDetailScreen.js
import React, { useEffect, useState } from 'react';
import { View, Text, Button, FlatList, Alert, ActivityIndicator, TouchableOpacity } from 'react-native';
import { getFlashcardsByDeck, deleteFlashcard } from '../services/flashcardService';

const DeckDetailScreen = ({ route, navigation }) => {
  const { deck } = route.params;
  const [cards, setCards] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCards = async () => {
      try {
        setLoading(true);
        const flashcards = await getFlashcardsByDeck(deck.id);
        setCards(flashcards);
      } catch (error) {
        Alert.alert("L·ªói t·∫£i th·∫ª", error.message);
      } finally {
        setLoading(false);
      }
    };

    const unsubscribe = navigation.addListener('focus', fetchCards);
    return unsubscribe;
  }, [navigation, deck.id]);

  const handleLongPress = (card) => {
    Alert.alert(
      'T√πy ch·ªçn th·∫ª',
      `B·∫°n mu·ªën l√†m g√¨ v·ªõi th·∫ª "${card.front}"?`,
      [
        {
          text: 'üìù Ch·ªânh s·ª≠a',
          onPress: () => navigation.navigate('EditCard', { card }),
        },
        {
          text: 'üóëÔ∏è Xo√°',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteFlashcard(card.id);
              setCards((prev) => prev.filter((c) => c.id !== card.id));
              Alert.alert('ƒê√£ xo√° th·∫ª.');
            } catch (err) {
              Alert.alert('L·ªói xo√° th·∫ª', err.message);
            }
          },
        },
        { text: 'Hu·ª∑', style: 'cancel' },
      ]
    );
  };

  if (loading) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color="#000" />
        <Text>ƒêang t·∫£i d·ªØ li·ªáu...</Text>
      </View>
    );
  }

  return (
    <View style={{ flex: 1, padding: 20 }}>
      <Text style={{ fontSize: 20, fontWeight: 'bold', marginBottom: 10 }}>{deck.title}</Text>

      <FlatList
        data={cards}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity onLongPress={() => handleLongPress(item)}>
            <Text style={{ paddingVertical: 5 }}>‚Ä¢ {item.front}</Text>
          </TouchableOpacity>
        )}
        ListEmptyComponent={<Text>Ch∆∞a c√≥ th·∫ª n√†o trong b·ªô n√†y.</Text>}
      />

      <Button title="‚ûï Th√™m th·∫ª" onPress={() => navigation.navigate('AddCard', { deckId: deck.id })} />
      <View style={{ height: 10 }} />
      <Button title="üìö B·∫Øt ƒë·∫ßu h·ªçc" onPress={() => navigation.navigate('Study', { deckId: deck.id })} />
      <View style={{ height: 10 }} />
      <Button title="üìù B·∫Øt ƒë·∫ßu ki·ªÉm tra" onPress={() => navigation.navigate("Quiz", { deckId: deck.id })} />
    </View>
  );
};

export default DeckDetailScreen;

